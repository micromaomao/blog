From e7a28b964ce7636670000468f9a58f1a47e4ed5c Mon Sep 17 00:00:00 2001
From: Tingmao Wang <m@maowtm.org>
Date: Sat, 4 Jan 2025 20:24:48 +0000
Subject: [PATCH 04/16] basic files for ick

---
 .config               |  2 ++
 Kconfig               |  6 ++++++
 include/linux/ick.h   | 21 +++++++++++++++++++++
 include/linux/sched.h |  4 ++++
 init/init_task.c      |  3 +++
 kernel/Makefile       |  2 ++
 kernel/ick.c          | 31 +++++++++++++++++++++++++++++++
 7 files changed, 69 insertions(+)
 create mode 100644 include/linux/ick.h
 create mode 100644 kernel/ick.c

diff --git a/.config b/.config
index cb5beb2fecb4..f166cb00c4d9 100644
--- a/.config
+++ b/.config
@@ -3443,3 +3443,5 @@ CONFIG_ARCH_USE_MEMTEST=y
 #
 # end of Rust hacking
 # end of Kernel hacking
+
+CONFIG_ICK=y
diff --git a/Kconfig b/Kconfig
index 745bc773f567..9b13ab8e4f29 100644
--- a/Kconfig
+++ b/Kconfig
@@ -30,3 +30,9 @@ source "lib/Kconfig"
 source "lib/Kconfig.debug"
 
 source "Documentation/Kconfig"
+
+config ICK
+	bool "ick"
+	default y
+	help
+		instant checkpoint
diff --git a/include/linux/ick.h b/include/linux/ick.h
new file mode 100644
index 000000000000..b086d91fa4d7
--- /dev/null
+++ b/include/linux/ick.h
@@ -0,0 +1,21 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#ifndef _LINUX_ICK_H
+#define _LINUX_ICK_H
+
+#include <linux/types.h>
+#include <linux/sched.h>
+
+#ifdef CONFIG_ICK
+
+struct ick_checked_process {
+	/* ??? */
+};
+
+int ick_checkpoint_proc(void);
+int ick_revert_proc(void);
+void ick_cleanup(struct task_struct *task);
+
+#endif /* CONFIG_ICK */
+
+#endif /* _LINUX_ICK_H */
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 9f58f1db4632..b20a4ced71f8 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1599,6 +1599,10 @@ struct task_struct {
 	struct user_event_mm		*user_event_mm;
 #endif
 
+#ifdef CONFIG_ICK
+	struct ick_checked_process *ick_data;
+#endif
+
 	struct {
 		/* This indicates whether a process is our target */
 		bool hack;
diff --git a/init/init_task.c b/init/init_task.c
index 7aeb9882d171..aefe6778df78 100644
--- a/init/init_task.c
+++ b/init/init_task.c
@@ -218,6 +218,9 @@ struct task_struct init_task __aligned(L1_CACHE_BYTES) = {
 #endif
 #ifdef CONFIG_SECCOMP_FILTER
 	.seccomp	= { .filter_count = ATOMIC_INIT(0) },
+#endif
+#ifdef CONFIG_ICK
+	.ick_data = NULL,
 #endif
 	.hack_target = { .hack = false, .next_number = 0 },
 };
diff --git a/kernel/Makefile b/kernel/Makefile
index 87866b037fbe..d129c357e521 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -159,3 +159,5 @@ $(obj)/kheaders_data.tar.xz: FORCE
 	$(call cmd,genikh)
 
 clean-files := kheaders_data.tar.xz kheaders.md5
+
+obj-$(CONFIG_ICK) += ick.o
diff --git a/kernel/ick.c b/kernel/ick.c
new file mode 100644
index 000000000000..173ff60990ac
--- /dev/null
+++ b/kernel/ick.c
@@ -0,0 +1,31 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#include <linux/ick.h>
+#include <linux/errno.h>
+
+/**
+ * Initialize the ick data structures on the current task and checkpoint it.
+ */
+int ick_checkpoint_proc(void)
+{
+	/* TODO: implement */
+	return -EPERM;
+}
+
+/**
+ * Revert the current task to the state checkpointed by ick_checkpoint_proc.
+ */
+int ick_revert_proc(void)
+{
+	/* TODO: implement */
+	return -EPERM;
+}
+
+/**
+ * Clean up any saved ick checkpoints from the current task, if there is any.
+ * Call before a task exits.
+ */
+void ick_cleanup(struct task_struct *task)
+{
+	/* TODO: implement */
+}
-- 
2.39.5

