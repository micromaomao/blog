From 10ed6d0b37ff824bf91a286b0e0fe63a2ebf6af3 Mon Sep 17 00:00:00 2001
From: Tingmao Wang <m@maowtm.org>
Date: Sat, 11 Jan 2025 20:22:04 +0000
Subject: [PATCH 07/16] save and restore registers

---
 include/linux/ick.h |  3 ++-
 kernel/ick.c        | 66 +++++++++++++++++++++++++++++++++++++++++----
 2 files changed, 63 insertions(+), 6 deletions(-)

diff --git a/include/linux/ick.h b/include/linux/ick.h
index b086d91fa4d7..29cba06d11de 100644
--- a/include/linux/ick.h
+++ b/include/linux/ick.h
@@ -9,7 +9,8 @@
 #ifdef CONFIG_ICK
 
 struct ick_checked_process {
-	/* ??? */
+	struct pt_regs saved_regs;
+	/* ... more to come ... */
 };
 
 int ick_checkpoint_proc(void);
diff --git a/kernel/ick.c b/kernel/ick.c
index 8d1e2c326a11..dff7dce04fc9 100644
--- a/kernel/ick.c
+++ b/kernel/ick.c
@@ -2,15 +2,40 @@
 
 #include <linux/ick.h>
 #include <linux/errno.h>
+#include <linux/ptrace.h>
+#include <linux/sched/task_stack.h>
 
 /**
  * Initialize the ick data structures on the current task and checkpoint it.
  */
 int ick_checkpoint_proc(void)
 {
-	/* TODO: implement */
+	struct ick_checked_process *ick_data;
+	struct pt_regs *regs;
+
+	if (current->ick_data) {
+		pr_alert("ick: %s[%d] already has a checkpoint\n",
+				current->comm, current->pid);
+		return -EEXIST;
+	}
+
+	ick_data = kzalloc(sizeof(*ick_data), GFP_KERNEL);
+	if (!ick_data)
+		return -ENOMEM;
+
+	/* Save registers */
+#if defined(__x86_64__)
+	regs = current_pt_regs();
+	memcpy(&ick_data->saved_regs, regs, sizeof(struct pt_regs));
+#else
+#error "Unsupported architecture"
+#endif
+
+	/* TODO: implement rest */
+
+	current->ick_data = ick_data;
+	trace_printk("ick: Checkpointed %s[%d]\n", current->comm, current->pid);
 
-	/* We just return 0 for now to make the code in `read` work. */
 	return 0;
 }
 
@@ -19,9 +44,29 @@ int ick_checkpoint_proc(void)
  */
 int ick_revert_proc(void)
 {
-	/* TODO: implement */
+	struct ick_checked_process *ick_data;
+	struct pt_regs *regs;
+
+	ick_data = current->ick_data;
+	if (!ick_data) {
+		pr_alert("ick: ick_revert_proc called on %s[%d] which is not under ick checkpoint\n",
+				current->comm, current->pid);
+		return -EINVAL;
+	}
+
+	/* Restore registers */
+#if defined(__x86_64__)
+	regs = current_pt_regs();
+	memcpy(regs, &ick_data->saved_regs, sizeof(struct pt_regs));
+#else
+#error "Unsupported architecture"
+#endif
+
+	/* TODO: implement rest */
+
+	trace_printk("Restored process %s[%d]\n",
+			current->comm, current->pid);
 
-	/* We just return 0 for now to make the code in `write` work. */
 	return 0;
 }
 
@@ -31,5 +76,16 @@ int ick_revert_proc(void)
  */
 void ick_cleanup(struct task_struct *task)
 {
-	/* TODO: implement */
+	struct ick_checked_process *ick_data = task->ick_data;
+
+	if (!ick_data)
+		return;
+
+	trace_printk("Cleaning up ick data for %s[%d]\n", task->comm, task->pid);
+
+	/* TODO: add more clean-up code here */
+
+	kfree(ick_data);
+	task->ick_data = NULL;
+	return;
 }
-- 
2.39.5

